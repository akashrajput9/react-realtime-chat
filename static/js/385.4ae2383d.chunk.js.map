{"version":3,"file":"static/js/385.4ae2383d.chunk.js","mappings":"kQA8EA,IA9De,WAAO,IAAD,IACbA,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KACPC,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMF,QAAjB,IAAxBA,SACDG,EAAE,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAUI,qBAGrB,GAZK,SAAmBD,GAExB,OAAkC,IAA3BE,OAAOC,KAAKH,GAAII,QAAgBJ,EAAGK,cAAgBH,MAE3D,CAQII,CAAUN,GAEX,OADAO,QAAQC,IAAIR,EAAG,SACR,wBAGT,IAAMS,EAAY,SAACT,GACjB,OAAO,SAAC,IAAD,CAAQU,IAAKV,EAAGW,KAAMC,IAAKC,EAAAA,GAAAA,MAAAA,UACnC,EACD,OACE,SAAC,IAAD,CAAKC,EAAG,EAAGC,GAAI,CAAEC,MAAM,OAAQC,gBAAwC,UAAvBtB,EAAMuB,QAAQC,KAAmB,UAAYxB,EAAMuB,QAAQE,WAAWC,MAAOC,UAAU,gCAAvI,UACA,UAAC,IAAD,CAAOC,WAAY,SAAUC,UAAU,MAAMC,eAAgB,gBAC7DV,GAAI,CAACC,MAAM,OAAQU,OAAO,QAD1B,WAEI,UAAC,IAAD,CAAOC,QAAS,WACZlC,GAASmC,EAAAA,EAAAA,MACZ,EAAEJ,UAAW,MAAOK,QAAS,EAF9B,WAGI,SAAC,IAAD,UACK7B,EAAG8B,WAAY,SAAC,IAAD,CAAcC,QAAQ,WACtCC,aAAc,CACVC,SAAU,SACVC,WAAY,SAEhBC,QAAQ,MALQ,UAMZ,SAAC1B,EAAD,CAAWT,GAAIA,OACH,SAACS,EAAD,CAAWT,GAAIA,OAGnC,UAAC,IAAD,CAAO6B,QAAS,GAAhB,WACQ,SAAC,IAAD,CAAYM,QAAQ,YAApB,SACKnC,EAAGoC,SAAWpC,EAAGW,MAAS,OAAFX,QAAE,IAAFA,GAAA,UAAAA,EAAIqC,aAAJ,mBAAY,UAAZ,eAAgB1B,OAAQ,MAErD,SAAC,IAAD,CAAYwB,QAAQ,UAApB,SACKnC,EAAG8B,UAAY,SAAU,mBAI1C,UAAC,IAAD,CAAON,UAAU,MAAMD,WAAW,SAASM,QAAS,EAApD,WAOI,SAAC,IAAD,WACI,SAAC,IAAD,OAEJ,SAAC,IAAD,CAASS,YAAY,WAAWC,UAAQ,KACxC,SAAC,IAAD,WACI,SAAC,IAAD,aAMf,C,uHC1EYC,GAASC,E,QAAAA,IAAG,wBAAyB,CAC9CC,aAAa,I,4BCkHjB,EA3DgB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAQX9C,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMF,QAAjB,IAAzBA,SACA+C,GAAS9C,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAM8C,IAAjB,IAArBD,MACNE,EAAAA,EAAAA,YAAU,WASR,OAPAN,EAAOO,GAAG,mBAAmB,SAACC,GAC1BzC,QAAQC,IAAI,gCAAiCwC,EAAKA,KAAKC,gBAAgBpD,EAASI,qBAAqBiD,GAAGF,EAAKA,KAAKG,QAAQP,EAAKM,IAC5HF,EAAKA,KAAKC,kBAAoBpD,EAASI,qBAAqBiD,IAAOF,EAAKA,KAAKG,SAAWP,EAAKM,KAC9FzD,EAAAA,EAAAA,KAAS2D,EAAAA,EAAAA,IAAWJ,EAAKA,MAE9B,IAEM,WAEHR,EAAOa,IAAI,kBACd,CACJ,GAAE,IAQD,IAAMC,GAAiBC,EAAAA,EAAAA,QAAO,MAS9B,OAPAT,EAAAA,EAAAA,YAAU,WAEJQ,EAAeE,SACjBF,EAAeE,QAAQC,eAAe,CAAEC,SAAU,UAErD,GAAE,CAAC7D,KAGF,UAAC8D,EAAA,EAAD,CAAK7C,EAAG,EAAR,WACE,SAAC8C,EAAA,EAAD,CAAO/B,QAAS,EAAhB,UACG,cAAIhC,QAAJ,IAAIA,OAAJ,EAAIA,EAAUmD,MAAMa,UAAUC,KAAI,SAACC,EAAIC,GACtC,MACO,SADCD,EAAGE,MAEA,SAAC,KAAD,CAAqBF,GAAIA,EAAIpB,KAAMA,GAArBqB,IAGd,uBAEZ,OAGH,gBAAKE,IAAKZ,MAGf,C,0QC5GKa,EAAS,SAAC,GAAe,IAAdJ,EAAa,EAAbA,GAAGpB,EAAU,EAAVA,KACVhD,GAAQC,EAAAA,EAAAA,KAChB,OACE,UAAC,IAAD,CAAO4B,UAAU,MAAMC,eAAgBsC,EAAGK,SAAW,QAAU,MAA/D,WACI,SAAC,IAAD,CAAKtD,EAAG,IAAKC,GAAI,CACTE,gBAAiB8C,EAAGK,SAAWzE,EAAMuB,QAAQE,WAAWiD,QACpD1E,EAAMuB,QAAQoD,QAAQC,KAAMC,aAAc,IAAKxD,MAAO,eAFlE,UAIA,UAAC,IAAD,CAAOa,QAAS,EAAhB,WACI,UAAC,IAAD,CAAOf,EAAG,EAAGe,QAAS,EAAGL,UAAU,MAAMD,WAAW,SACpDR,GAAI,CAACE,gBAAgBtB,EAAMuB,QAAQE,WAAWC,MAAOmD,aAAa,GADlE,WAEI,SAAC,IAAD,CAAOC,KAAM,MACb,SAAC,IAAD,CAAYtC,QAAQ,UAApB,2BAGA,SAAC,IAAD,WACI,SAAC,IAAD,UAGR,SAAC,IAAD,CAAYA,QAAQ,QAAQpB,GAAI,CAAC2D,MAAOX,EAAGK,SAAWzE,EAAMuB,QAAQyD,KAAO,QAA3E,SACKZ,EAAGa,eAIXjC,IAAQ,SAACkC,EAAD,MAIhB,EAEKC,EAAU,SAAC,GAAe,IAAdf,EAAa,EAAbA,GAAGpB,EAAU,EAAVA,KACXhD,GAAQC,EAAAA,EAAAA,KAChB,OACE,UAAC,IAAD,CAAO4B,UAAU,MAAMC,eAAgBsC,EAAGK,SAAW,QAAU,MAA/D,WACI,SAAC,IAAD,CAAKtD,EAAG,IAAKC,GAAI,CACTE,gBAAiB8C,EAAGK,SAAWzE,EAAMuB,QAAQE,WAAWiD,QACpD1E,EAAMuB,QAAQoD,QAAQC,KAAMC,aAAc,IAAKxD,MAAO,eAFlE,UAIA,SAAC,IAAD,CAAOa,QAAS,EAAhB,UACI,UAAC,IAAD,CAAOf,EAAG,EAAGe,QAAS,EAAGN,WAAW,QACnCR,GAAI,CAACE,gBAAgBtB,EAAMuB,QAAQE,WAAWC,MAAOmD,aAAc,GADpE,WAEI,gBAAK5D,IAAKmD,EAAGgB,QAASrE,IAAKqD,EAAGa,QAASI,MAAO,CAACC,UAAU,IAAKT,aAAa,WAC3E,UAAC,IAAD,CAAO3C,QAAS,EAAhB,WACI,SAAC,IAAD,CAAYM,QAAQ,YAApB,gCACA,SAAC,IAAD,CAAYA,QAAQ,YAAYpB,GAAI,CAAC2D,MAAM/E,EAAMuB,QAAQoD,QAAQC,MACjEW,UAAWC,EAAAA,EAAMC,GAAG,4BADpB,iCAGJ,SAAC,IAAD,CAAYjD,QAAQ,QAAQuC,MAAOX,EAAGK,SAAWzE,EAAMuB,QAAQyD,KAAO,OAAtE,SACKZ,EAAGa,iBAKfjC,IAAQ,SAACkC,EAAD,MAGhB,EA+CKQ,EAAU,SAAC,GAAe,IAAdtB,EAAa,EAAbA,GAAGpB,EAAU,EAAVA,KACXhD,GAAQC,EAAAA,EAAAA,KAER0F,GADUxF,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAASA,EAAM8C,IAAf,IAArBD,KACkBM,KAAOa,EAAGZ,QACnC,OACI,UAAC,IAAD,CAAO3B,UAAU,MAAMC,eAAgB6D,EAAc,QAAU,MAA/D,WACI,SAAC,IAAD,CAAKxE,EAAG,IAAKC,GAAI,CACbE,gBAAiBqE,EAAc3F,EAAMuB,QAAQE,WAAWiD,QACpD1E,EAAMuB,QAAQoD,QAAQC,KAAMC,aAAc,IAAKxD,MAAO,eAF9D,UAII,SAAC,IAAD,CAAYmB,QAAQ,QAAQuC,MAAOY,EAAc3F,EAAMuB,QAAQyD,KAAO,OAAtE,SACKZ,EAAGwB,YAGX5C,IAAQ,SAACkC,EAAD,MAGpB,EAaKA,EAAiB,WAErB,MAAgCW,EAAAA,SAAe,MAA/C,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAOC,QAAQH,GACfI,EAAc,SAACC,GACnBJ,EAAYI,EAAMC,cACnB,EAID,OACE,iCACA,SAAC,IAAD,CACA7C,GAAG,eACH,gBAAeyC,EAAO,kBAAeK,EACrC,gBAAc,OACd,gBAAeL,EAAO,YAASK,EAC/BrE,QAASkE,EACTpB,KAAM,MAGN,SAAC,IAAD,CACIvB,GAAG,aACHuC,SAAUA,EACVE,KAAMA,EACNM,QAlBc,WAClBP,EAAY,KACb,EAiBKQ,cAAe,CACb,kBAAmB,gBANzB,UASE,SAAC,IAAD,CAAOrE,QAAS,EAAGsE,GAAI,EAAvB,SACGC,EAAAA,GAAAA,KAAoB,SAACrC,EAAGC,GAAJ,OACjB,SAAC,IAAD,CAAUrC,QAASkE,EAAnB,SAA6C9B,EAAGsC,OAAXrC,EADpB,UAO5B,C,+UCXKsC,GAAcC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAkB,cAAG5G,MAAH,MAAgB,CAClD,wBAAyB,CACvB8G,WAAY,OACZC,cAAe,QAHiB,IAOhCC,EAAU,CACZ,CACIjC,MAAM,UACNkC,MAAM,SAAC,IAAD,CAAOnC,KAAM,KACnBoC,EAAE,IACFR,MAAM,eAEV,CACI3B,MAAM,UACNkC,MAAM,SAAC,IAAD,CAASnC,KAAM,KACrBoC,EAAE,IACFR,MAAM,YAEV,CACI3B,MAAM,UACNkC,MAAM,SAAC,IAAD,CAAQnC,KAAM,KACpBoC,EAAE,IACFR,MAAM,SAEV,CACI3B,MAAM,UACNkC,MAAM,SAAC,IAAD,CAAMnC,KAAM,KAClBoC,EAAE,IACFR,MAAM,YAEV,CACI3B,MAAM,UACNkC,MAAM,SAAC,IAAD,CAAMnC,KAAM,KAClBoC,EAAE,IACFR,MAAM,YAIRS,EAAY,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAC5C,GAAoCC,EAAAA,EAAAA,WAAS,GAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAMA,OACI,SAACd,EAAD,CACIe,MAAOL,EACPM,SAPkB,SAACC,GACvBN,EAAcM,EAAEC,OAAOH,MAC1B,EAMOI,WAAS,EACTC,YAAY,qBACZvF,QAAQ,SACRwF,WAAY,CACRC,kBAAkB,EAClBC,gBACI,UAACjE,EAAA,EAAD,CAAO7C,GAAI,CAAEC,MAAO,eAApB,WACI,SAAC4C,EAAA,EAAD,CAAO7C,GAAI,CAAE+G,SAAU,WAAYC,QAASZ,EAAa,eAAiB,QAA1E,SACKR,EAAQ7C,KAAI,SAACC,EAAIC,GAAL,OACT,SAACgE,EAAA,EAAD,CAASC,UAAU,QAAQ5B,MAAOtC,EAAGsC,MAArC,UACI,SAAC6B,EAAA,EAAD,CAAKnH,GAAI,CAAE+G,SAAU,WAAYK,KAAMpE,EAAG8C,EAAG5F,gBAAiB8C,EAAGW,OAAjE,SACKX,EAAG6C,QAFqC5C,EADxC,OAQjB,SAACoE,EAAA,EAAD,CAAgBN,SAAS,QAAzB,UACI,SAACO,EAAA,EAAD,CAAY1G,QAAS,kBAAMyF,GAAc,SAACkB,GAAD,OAAWA,CAAX,GAApB,EAArB,UACI,SAAC,IAAD,WAKhBC,cACI,SAACH,EAAA,EAAD,CAAgBN,SAAS,QAAzB,UACI,SAACO,EAAA,EAAD,CAAY1G,QAAS,kBAAMoF,GAAc,SAACuB,GAAD,OAAWA,CAAX,GAApB,EAArB,UACI,SAAC,IAAD,UAO3B,EA2CD,EAxCe,WACX,IAAM3I,GAAQC,EAAAA,EAAAA,KACd,GAAoCsH,EAAAA,EAAAA,WAAS,GAA7C,eAAmBH,GAAnB,WACQyB,GAAU1I,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAM8C,IAAjB,IAAtB2F,MACA3I,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMF,QAAjB,IAAzBA,SAER,GAAoCqH,EAAAA,EAAAA,UAAS,IAA7C,eAAOF,EAAP,KAAmBC,EAAnB,KAEMwB,EAAiB,yCAAG,6FAClBzB,EAAW0B,OADO,iCAEGC,EAAAA,EAAAA,GAAS,aAAcH,EAAO,CAAEvF,gBAAiBpD,EAASI,qBAAqBiD,GAAI0B,QAASoC,GAAc,QAF7G,QAEZ4B,EAFY,QAGPC,UACP5B,EAAc,IACd2B,EAAO5F,KAAKiB,KAAO,QACnBxE,EAAAA,EAAAA,KAAS2D,EAAAA,EAAAA,IAAWwF,EAAO5F,QANb,2CAAH,qDAYvB,OACI,SAACW,EAAA,EAAD,CAAK7C,EAAG,EAAGC,GAAI,CAAEC,MAAO,OAAQC,gBAAwC,UAAvBtB,EAAMuB,QAAQC,KAAmB,UAAYxB,EAAMuB,QAAQE,WAAWC,MAAOC,UAAW,gCAAzI,UACI,UAACsC,EAAA,EAAD,CAAOpC,UAAU,MAAMD,WAAY,SAAUM,QAAS,EAAtD,WACI,SAAC+B,EAAA,EAAD,CAAO7C,GAAI,CAAEC,MAAO,QAApB,UAEI,SAAC8F,EAAD,CAAWC,cAAeA,EAAeC,WAAYA,EAAYC,cAAeA,OAGpF,SAACtD,EAAA,EAAD,CAAKhC,QAAS8G,EAAmB1H,GAAI,CAAEW,OAAQ,GAAIV,MAAO,GAAIC,gBAAiBtB,EAAMuB,QAAQoD,QAAQC,KAAMC,aAAc,KAAzH,UACI,SAACZ,EAAA,EAAD,CAAO7C,GAAI,CAAEW,OAAQ,OAAQV,MAAO,OAAQO,WAAY,SAAUE,eAAgB,UAAlF,UACI,SAAC4G,EAAA,EAAD,WACI,SAAC,IAAD,CAAgB3D,MAAM,mBAOjD,E,UC1QD,EAlBqB,YACH9E,EAAAA,EAAAA,KAEhB,OACE,UAACgE,EAAA,EAAD,CAAOlC,OAAQ,OAAQuD,UAAW,QAASjE,MAAO,OAAlD,WAGI,SAAC8H,EAAA,EAAD,KAEA,SAACnF,EAAA,EAAD,CAAKoF,UAAU,YAAY/H,MAAO,OAAQD,GAAI,CAACiI,SAAS,EAAGtH,OAAO,OAAQuH,UAAU,UAApF,UACA,SAACC,EAAA,EAAD,CAASvG,MAAM,OAGhB,SAAC,EAAD,MAGN,C,6CCrBKwG,GAAc5C,EAAAA,EAAAA,GAAO6C,EAAAA,EAAP7C,EAAc,gBAAG5G,EAAH,EAAGA,MAAH,MAAgB,CAC9C,oBAAqB,CACnBsB,gBAAiB,UACjByD,MAAO,UACPpD,UAAU,aAAD,OAAe3B,EAAMuB,QAAQE,WAAWC,OACjD,WAAY,CACVyG,SAAU,WACVK,IAAK,EACLkB,KAAM,EACNrI,MAAO,OACPU,OAAQ,OACR8C,aAAc,MACd8E,UAAW,mCACXC,OAAQ,yBACRhE,QAAS,OAGb,oBAAqB,CACnB,KAAM,CACJiE,UAAW,YACXC,QAAS,GAEX,OAAQ,CACND,UAAW,aACXC,QAAS,IAxBiB,IA6BhC,K,mGC7BK,SAAed,EAAtB,+CAAO,OAAP,0BAAO,WAAwBe,GAAxB,qHAA+BlB,EAA/B,+BAAuC,KAAMxF,EAA7C,+BAAoD,CAAC,EAAG2G,EAAxD,+BAAiE,MAAOC,EAAxE,+BAAkF,CAAC,EACtFrJ,QAAQC,IAAI,oBAAqBwC,GAD9B,SAGC2G,EAASA,EAAOE,cACZC,EAAMC,EAAAA,GAAWL,EAGN,QAAXC,GAAoBzJ,OAAOC,KAAK6C,GAAM5C,OAAS,IACzC4J,EAAc,IAAIC,gBAAgBjH,GAAMkH,WAC9CJ,GAAG,WAAQE,IAGTG,EAAU,CACZR,OAAAA,EACAC,SAAQ,gBACJ,eAAgB,oBACZpB,EAAQ,CAAE4B,cAAc,UAAD,OAAY5B,IAAY,CAAC,GACjDoB,IAKI,QAAXD,IACAQ,EAAQE,KAAOC,KAAKC,UAAUvH,IAvBnC,UA0BwBwH,MAAMV,EAAKK,GA1BnC,YA0BOM,EA1BP,QA6BeC,GA7Bf,wBA8BSC,EA9BT,qBA8BsCF,EAASG,OA9B/C,YA8ByDH,EAASI,YACzDC,EAAgB,CAAC,EA/B1B,oBAiC+BL,EAASM,OAjCxC,QAiCSD,EAjCT,OAkCSH,EAAeG,EAAclG,SAAW+F,EAlCjD,mDAoCSpK,QAAQyK,MAAM,qCAAd,MApCT,0CAuCSJ,OAAQH,EAASG,OACjBhG,QAAS+F,EACTF,SAAUK,EACVjC,QAAO,UAAEiC,SAAF,aAAE,EAAejC,SACH,cAAjB8B,EAA+B,CAAC,EAAI,CAAEM,aAAcN,KA3CjE,yBAgD4BF,EAASM,OAhDrC,eAgDOG,EAhDP,yBAiDQA,GAjDR,2DAoDQ,CACHN,OAAQ,EACRhG,QAAQ,mBAAD,OAAqB,KAAMA,WAtDvC,0F","sources":["components/Conversation/Header.js","socket.js","components/Conversation/Message.js","components/Conversation/MsgTypes.js","components/Conversation/Footer.js","components/Conversation/index.js","components/StyledBadge.js","utils/fetchApi.js"],"sourcesContent":["import { Avatar, Box, Typography,IconButton, Divider,Stack, } from '@mui/material'\nimport { CaretDown, MagnifyingGlass } from 'phosphor-react'\nimport React from 'react';\nimport { useTheme } from \"@mui/material/styles\";\nimport { faker } from '@faker-js/faker';\nimport StyledBadge from '../StyledBadge';\nimport { ToggleSidebar } from '../../redux/slices/app';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../../redux/slices/authSlice';\nimport { Navigate } from 'react-router-dom';\n\nexport function isNotReal(ce)\n{\n  return Object.keys(ce).length === 0 && ce.constructor === Object;\n  // return obj && obj !== 'null' && obj !== 'undefined';\n}\nconst Header = () => {\n  const dispatch = useDispatch();\n  const theme = useTheme();\n  const {messages} = useSelector((state) => state.messages);\n  const ce = messages?.conversation_element;\n \n  \n  if(isNotReal(ce)){\n    console.log(ce,'ceee')\n    return <></>\n  }\n  \n  const AvatarImg = (ce)=>{\n    return <Avatar alt={ce.name} src={faker.image.avatar()}/>\n  }\n  return (\n    <Box p={2} sx={{ width:'100%', backgroundColor: theme.palette.mode === 'light' ? '#F8FAFF' : theme.palette.background.paper, boxShadow:'0px 0px 2px rgba(0,0,0,0.25)'}}>\n    <Stack alignItems={'center'} direction='row' justifyContent={'space-between'}\n    sx={{width:'100%', height:'100%'}}>\n        <Stack onClick={()=>{\n            dispatch(ToggleSidebar());\n        }} direction={'row'} spacing={2}>\n            <Box>\n                {ce.is_online ? <StyledBadge  overlap=\"circular\"\n                anchorOrigin={{ // position\n                    vertical: \"bottom\",\n                    horizontal: \"right\",\n                }}\n                variant=\"dot\">\n                    <AvatarImg ce={ce} />\n                </StyledBadge>: <AvatarImg ce={ce} />}\n                \n            </Box>\n            <Stack spacing={0.2}>\n                    <Typography variant='subtitle2'>\n                        {ce.is_group ? ce.name : ce?.users?.[0]?.name || ''}\n                    </Typography>\n                    <Typography variant='caption'>\n                        {ce.is_online ? 'Online': 'Offline'}\n                    </Typography>\n                </Stack>\n        </Stack>\n        <Stack direction='row' alignItems='center' spacing={3}>\n            {/* <IconButton>\n                <VideoCamera/>\n            </IconButton>\n            <IconButton>\n                <Phone/>\n            </IconButton> */}\n            <IconButton>\n                <MagnifyingGlass/>\n            </IconButton>\n            <Divider orientation='vertical' flexItem/>\n            <IconButton>\n                <CaretDown/>\n            </IconButton>\n        </Stack>\n    </Stack>\n</Box>\n  )\n}\n\nexport default Header","import { io } from \"socket.io-client\";\n\nexport const socket = io(\"http://localhost:3002\", {\n    autoConnect: true\n  });","// import { Box, Stack } from '@mui/material'\n// import React, { useEffect } from 'react';\n// import {Chat_History} from '../../data'\n// import { DocMsg, LinkMsg, MediaMsg, ReplyMsg, TextMsg, TimeLine } from './MsgTypes';\n// import { useSelector } from 'react-redux';\n\n// const Message = ({menu}) => {\n//   const { messages } = useSelector((state) => state.messages);\n  \n//   return (\n//     <Box p={3}>\n//         <Stack spacing={3}>\n//             {[...messages?.data].reverse().map((el,index)=>{\n//               switch(el.type){\n//                 case 'text': \n//                   return <TextMsg key={index} el={el} menu={menu} />\n//               }\n//                 // switch (el.type) {\n//                 //     case 'divider':\n//                 //       return <TimeLine key={index} el={el}/>\n                        \n//                 //     case 'msg':\n//                 //         switch (el.subtype) {\n//                 //             case 'img':\n//                 //               return <MediaMsg key={index} el={el} menu={menu}/>\n//                 //             case 'doc':\n//                 //                 return <DocMsg key={index} el={el} menu={menu}/>\n                                \n//                 //             case 'link':\n//                 //                 return <LinkMsg key={index} el={el} menu={menu}/>\n//                 //             case 'reply':\n//                 //                 return <ReplyMsg key={index} el={el} menu={menu}/>\n                        \n//                 //             default:\n//                 //                return <TextMsg key={index} el={el} menu={menu}/>\n//                 //         }\n//                 //         break;\n                \n//                 //     default:\n//                 //       return <></>;\n//                 // }\n//             })}\n//         </Stack>\n//     </Box>\n//   )\n// }\n\n// export default Message\n\n\nimport { Box, Stack } from '@mui/material'\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { TextMsg } from './MsgTypes';  // Assuming you're rendering TextMsg\nimport { socket } from '../../socket';\nimport { dispatch } from '../../redux/store';\nimport { addMessage } from '../../redux/slices/messageSlice';\n\nconst Message = ({ menu }) => {\n// socket.on(\"connect\", () => {\n//     console.log(\"Connected to server:\", socket.id);\n// });\n\n// socket.on(\"receive_message\", (data) => {\n//     console.log(\"Message from server:\", data);\n// });\nconst { messages } = useSelector((state) => state.messages);\nconst { user } = useSelector((state) => state.auth);\n  useEffect(() => {\n    // Listen for 'receive_message' event\n    socket.on(\"receive_message\", (data) => {\n        console.log(\"Message received from server:\", data.data.conversation_id,messages.conversation_element.id,data.data.user_id,user.id);\n        if(data.data.conversation_id === messages.conversation_element.id  && data.data.user_id != user.id){\n          dispatch(addMessage(data.data))\n        }\n    });\n\n    return () => {\n        // Clean up the event listener on component unmount\n        socket.off(\"receive_message\");\n    };\n}, []);\n\n\n  \n\n  \n\n  // Ref to the messages container\n  const messagesEndRef = useRef(null);\n\n  useEffect(() => {\n    // Scroll to bottom when messages change\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [messages]); // Re-run this effect when `messages` change\n\n  return (\n    <Box p={3}>\n      <Stack spacing={3}>\n        {[...messages?.data].reverse().map((el, index) => {\n          switch (el.type) {\n            case 'text':\n              return <TextMsg key={index} el={el} menu={menu} />;\n            // Add more cases for other message types (e.g., Media, Link, etc.)\n            default:\n              return <></>;\n          }\n        })}\n      </Stack>\n      {/* This empty div will serve as the scroll target */}\n      <div ref={messagesEndRef} />\n    </Box>\n  );\n};\n\nexport default Message;\n","import { Box, Divider, IconButton, Link, Stack, Typography, Menu, MenuItem } from '@mui/material';\nimport { useTheme } from '@mui/material/styles'\nimport { DotsThreeVertical, DownloadSimple, Image } from 'phosphor-react';\nimport React from 'react';\nimport {Message_options} from '../../data'\nimport { useSelector } from 'react-redux';\n\nconst DocMsg = ({el,menu}) => {\n    const theme = useTheme();\n  return (\n    <Stack direction='row' justifyContent={el.incoming ? 'start' : 'end'}>\n        <Box p={1.5} sx={{\n                backgroundColor: el.incoming ? theme.palette.background.default :\n                    theme.palette.primary.main, borderRadius: 1.5, width: 'max-content'\n            }}>\n        <Stack spacing={2}>\n            <Stack p={2} spacing={3} direction='row' alignItems='center' \n            sx={{backgroundColor:theme.palette.background.paper, borderRadius:1}}>\n                <Image size={48}/>\n                <Typography variant='caption'>\n                    Abstract.png\n                </Typography>\n                <IconButton>\n                    <DownloadSimple/>\n                </IconButton>\n            </Stack>\n            <Typography variant='body2' sx={{color: el.incoming ? theme.palette.text : '#fff' }} >\n                {el.message}\n            </Typography>\n        </Stack>\n        </Box>\n        {menu && <MessageOptions/>}\n        \n    </Stack>\n  )\n}\n\nconst LinkMsg = ({el,menu}) => {\n    const theme = useTheme();\n  return (\n    <Stack direction='row' justifyContent={el.incoming ? 'start' : 'end'}>\n        <Box p={1.5} sx={{\n                backgroundColor: el.incoming ? theme.palette.background.default :\n                    theme.palette.primary.main, borderRadius: 1.5, width: 'max-content'\n            }}>\n        <Stack spacing={2}>\n            <Stack p={2} spacing={3} alignItems='start'\n             sx={{backgroundColor:theme.palette.background.paper, borderRadius: 1}}>\n                <img src={el.preview} alt={el.message} style={{maxHeight:210, borderRadius:'10px'}}/>\n                <Stack spacing={2}>\n                    <Typography variant='subtitle2'>Creating Chat App</Typography>\n                    <Typography variant='subtitle2' sx={{color:theme.palette.primary.main}} \n                    component={Link} to=\"//https://www.youtube.com\">www.youtube.com</Typography>\n                </Stack>\n                <Typography variant='body2' color={el.incoming ? theme.palette.text : '#fff'}>\n                    {el.message}\n                </Typography>\n            </Stack>\n        </Stack>\n        </Box>\n        {menu && <MessageOptions/>}\n    </Stack>\n  )\n}\n\nconst ReplyMsg = ({el, menu}) => {\n    const theme = useTheme();\n  return (\n    <Stack direction='row' justifyContent={el.incoming ? 'start' : 'end'}>\n        <Box p={1.5} sx={{\n                backgroundColor: el.incoming ? theme.palette.background.default :\n                    theme.palette.primary.main, borderRadius: 1.5, width: 'max-content'\n            }}>\n        <Stack spacing={2}>\n            <Stack p={2} direction='column' spacing={3} alignItems='center'\n            sx={{backgroundColor:theme.palette.background.paper, borderRadius:1}}>\n                <Typography variant='body2' color={theme.palette.text}>\n                    {el.message}\n                </Typography>    \n            </Stack>\n            <Typography variant='body2' color={ el.incoming ? theme.palette.text : '#fff'}>\n                {el.reply}\n            </Typography>\n        </Stack>\n        </Box>\n        {menu && <MessageOptions/>}\n    </Stack>\n  )\n}\n\nconst MediaMsg = ({el,menu}) => {\n    const theme = useTheme();\n  return (\n    <Stack direction='row' justifyContent={el.incoming ? 'start' : 'end'}>\n        <Box p={1.5} sx={{\n                backgroundColor: el.incoming ? theme.palette.background.default :\n                    theme.palette.primary.main, borderRadius: 1.5, width: 'max-content'\n            }}>\n                <Stack spacing={1}>\n                    <img src={el.img} alt={el.message} style={{maxHeight: 210 , borderRadius:'10px'}}/>\n                    <Typography variant='body2' color={el.incoming ? theme.palette.text : '#fff'}>\n                        {el.message}\n                    </Typography>\n                </Stack>\n            </Box>\n            {menu && <MessageOptions/>}\n    </Stack>\n  )\n}\n\nconst TextMsg = ({el,menu}) => {\n    const theme = useTheme();\n    const {user}  = useSelector((state)=>state.auth);\n    const is_incoming = user.id !== el.user_id;\n    return (\n        <Stack direction='row' justifyContent={is_incoming ? 'start' : 'end'}>\n            <Box p={1.5} sx={{\n                backgroundColor: is_incoming ? theme.palette.background.default :\n                    theme.palette.primary.main, borderRadius: 1.5, width: 'max-content'\n            }}>\n                <Typography variant='body2' color={is_incoming ? theme.palette.text : '#fff'}>\n                    {el.content}\n                </Typography>\n            </Box>\n            {menu && <MessageOptions/>}\n        </Stack>\n    )\n}\n\nconst TimeLine = ({ el }) => {\n    const theme = useTheme();\n    return <Stack direction='row' alignItems='center' justifyContent='space-between'>\n        <Divider width='46%' />\n        <Typography variant='caption' sx={{ color: theme.palette.text }}>\n            {el.text}\n        </Typography>\n        <Divider width='46%' />\n    </Stack>\n}\n\nconst MessageOptions = () => {\n    \n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  return (\n    <>\n    <DotsThreeVertical \n    id=\"basic-button\"\n    aria-controls={open ? 'basic-menu' : undefined}\n    aria-haspopup=\"true\"\n    aria-expanded={open ? 'true' : undefined}\n    onClick={handleClick}\n    size={20}\n    />\n\n    <Menu\n        id=\"basic-menu\"\n        anchorEl={anchorEl}\n        open={open}\n        onClose={handleClose}\n        MenuListProps={{\n          'aria-labelledby': 'basic-button',\n        }}\n      >\n      <Stack spacing={1} px={1}>\n        {Message_options.map((el,index)=>(\n            <MenuItem onClick={handleClick} key={index}>{el.title}</MenuItem>\n        ))}\n      </Stack>\n      </Menu>\n    </>\n  )\n}\n\n\n// should not be default export, because we need to export multiple things\nexport { TimeLine, TextMsg, MediaMsg, ReplyMsg, LinkMsg, DocMsg }","// import { Box, Fab, IconButton, InputAdornment, Stack, TextField, Tooltip } from '@mui/material';\n// import React, { useEffect, useState } from 'react';\n// import { styled, useTheme } from \"@mui/material/styles\";\n// import { LinkSimple, PaperPlaneTilt, Smiley,Camera, File, Image, Sticker, User } from 'phosphor-react';\n// import data from '@emoji-mart/data'\n// import Picker from '@emoji-mart/react'\n// import { apifetch } from '../../utils/fetchApi';\n// import { useSelector } from 'react-redux';\n// import { setMessages } from '../../redux/slices/messageSlice';\n// import { dispatch } from '../../redux/store';\n\n// const StyledInput = styled(TextField)(({ theme }) => ({\n//     \"& .MuiInputBase-input\": {\n//       paddingTop: '12px',\n//       paddingBottom: '12px',\n//     }  \n//   }));\n\n\n//   const Actions = [\n//     {\n//         color:'#4da5fe',\n//         icon: <Image size={24}/>,\n//         y:102,\n//         title:'Photo/Video'\n//     },\n//     {\n//         color:'#1b8cfe',\n//         icon: <Sticker size={24}/>,\n//         y:172,\n//         title:'Stickers'\n//     },\n//     {\n//         color:'#0172e4',\n//         icon: <Camera size={24}/>,\n//         y:242,\n//         title:'Image'\n//     },\n//     {\n//         color:'#0159b2',\n//         icon: <File size={24}/>,\n//         y:312,\n//         title:'Document'\n//     },\n//     {\n//         color:'#013f7f',\n//         icon: <User size={24}/>,\n//         y:382,\n//         title:'Contact'\n//     }\n//   ];\n  \n// let inputField = \"\";\n// const ChatInput = ({setOpenPicker}) =>{\n//     const [openAction, setOpenAction] = useState(false);\n    \n//     const handleInputChange = (e) => {\n//         inputField = e.target.value;\n//     }\n//     return (\n//         <StyledInput  onChange={handleInputChange} fullWidth placeholder='Write a message...' variant='filled' InputProps={{\n//             disableUnderline: true,\n//             startAdornment: \n//             <Stack sx={{width:'max-content'}}>\n//                 <Stack sx={{position:'relative', display: openAction ? 'inline-block' : 'none'}}>\n//                     {Actions.map((el,index)=>(\n//                         <Tooltip placement='right' title={el.title} key={index}>\n//                             <Fab sx={{position:'absolute', top: -el.y, backgroundColor: el.color}}>\n//                                 {el.icon}\n//                             </Fab>\n//                         </Tooltip>\n                      \n//                     ))}\n//                 </Stack>\n//                 <InputAdornment position=\"start\">\n//                     <IconButton onClick={()=>{\n//                         setOpenAction((prev)=>!prev)\n//                     }}>\n//                         <LinkSimple/>\n//                     </IconButton>\n//                 </InputAdornment>\n//             </Stack>\n//             ,\n//             endAdornment: <InputAdornment position=\"start\">\n//             <IconButton onClick={()=>{\n//                 setOpenPicker((prev)=> !prev);\n//             }}>\n//                 <Smiley/>\n//             </IconButton>\n//             </InputAdornment>\n//         }}/>\n//     )\n// }\n\n// const Footer = () => {\n//     const theme = useTheme();\n//     const [openPicker, setOpenPicker] = useState(false);\n//     const {token} = useSelector((state) => state.auth);\n//     const {messages} = useSelector((state) => state.messages);\n//     // const handleInputChange  = (e) => {\n//     //     setInputMessage(e.target.value);\n//     // }\n//     // useEffect(() => {\n\n//     //     console.log(messages,'new message')\n//     // },[messages])\n//     const handleSendMessage = async () => {\n//         const apiRes = await apifetch(\"/chat/send\",token,{conversation_id: messages.conversation_element.id,message: inputField },\"POST\")\n//         if(apiRes.success){\n//             inputField = \"\";\n            \n//             // messages.data[] = apiRes.data;\n  \n            \n//             const updatedMessages = {\n//                 ...messages, // Copy the previous state\n//                 data: [...messages.data, apiRes.data], // Append the new message to 'data'\n//               };\n            \n//               // Dispatch the action to update the state\n//               dispatch(setMessages(updatedMessages));\n            \n            \n//         }\n//     }\n//   return (\n//     <Box p={2} sx={{ width:'100%', backgroundColor: theme.palette.mode === 'light' ? '#F8FAFF' :\n//      theme.palette.background.paper, boxShadow:'0px 0px 2px rgba(0,0,0,0.25)'}}>\n//     <Stack direction='row' alignItems={'center'} spacing={3}>\n\n//         <Stack sx={{width:'100%'}}> \n//              {/* Chat Input */}\n//             <Box sx={{ display: openPicker ? 'inline' : 'none' , zIndex:10, position:'fixed',bottom:81, right:100}}>\n//                 <Picker theme={theme.palette.mode} data={data} onEmojiSelect={console.log}/>\n//             </Box> \n//             <ChatInput  setOpenPicker={setOpenPicker} />\n//         </Stack>\n        \n//         <Box onClick={handleSendMessage} sx={{height:48, width: 48, backgroundColor:theme.palette.primary.main, \n//         borderRadius: 1.5}}>\n//             <Stack sx={{height:'100%', width:'100%', alignItems:'center', justifyContent:'center'}}>\n//                 <IconButton>\n//                     <PaperPlaneTilt color='#fff'/>\n//                 </IconButton>\n//             </Stack>\n            \n//         </Box>\n//     </Stack>\n// </Box>\n//   )\n// }\n\n// export default Footer\n\n\nimport { Box, Fab, IconButton, InputAdornment, Stack, TextField, Tooltip } from '@mui/material';\nimport React, { useState } from 'react';\nimport { styled, useTheme } from \"@mui/material/styles\";\nimport { LinkSimple, Smiley, Camera, File, Image, Sticker, User } from 'phosphor-react';\nimport { useSelector } from 'react-redux';\nimport { PaperPlaneTilt } from 'phosphor-react';\nimport { apifetch } from '../../utils/fetchApi';\nimport { addMessage, setMessages } from '../../redux/slices/messageSlice';\nimport { dispatch } from '../../redux/store';\nimport io from \"socket.io-client\";\n\n\nconst StyledInput = styled(TextField)(({ theme }) => ({\n    \"& .MuiInputBase-input\": {\n      paddingTop: '12px',\n      paddingBottom: '12px',\n    }  \n  }));\n\nconst Actions = [\n    {\n        color:'#4da5fe',\n        icon: <Image size={24}/>,\n        y:102,\n        title:'Photo/Video'\n    },\n    {\n        color:'#1b8cfe',\n        icon: <Sticker size={24}/>,\n        y:172,\n        title:'Stickers'\n    },\n    {\n        color:'#0172e4',\n        icon: <Camera size={24}/>,\n        y:242,\n        title:'Image'\n    },\n    {\n        color:'#0159b2',\n        icon: <File size={24}/>,\n        y:312,\n        title:'Document'\n    },\n    {\n        color:'#013f7f',\n        icon: <User size={24}/>,\n        y:382,\n        title:'Contact'\n    }\n];\n\nconst ChatInput = ({ setOpenPicker, inputField, setInputField }) => {\n    const [openAction, setOpenAction] = useState(false);\n\n    const handleInputChange = (e) => {\n        setInputField(e.target.value); // Update state on input change\n    };\n\n    return (\n        <StyledInput\n            value={inputField} // Bind the value to inputField\n            onChange={handleInputChange}\n            fullWidth\n            placeholder='Write a message...'\n            variant='filled'\n            InputProps={{\n                disableUnderline: true,\n                startAdornment: (\n                    <Stack sx={{ width: 'max-content' }}>\n                        <Stack sx={{ position: 'relative', display: openAction ? 'inline-block' : 'none' }}>\n                            {Actions.map((el, index) => (\n                                <Tooltip placement='right' title={el.title} key={index}>\n                                    <Fab sx={{ position: 'absolute', top: -el.y, backgroundColor: el.color }}>\n                                        {el.icon}\n                                    </Fab>\n                                </Tooltip>\n                            ))}\n                        </Stack>\n                        <InputAdornment position=\"start\">\n                            <IconButton onClick={() => setOpenAction((prev) => !prev)}>\n                                <LinkSimple />\n                            </IconButton>\n                        </InputAdornment>\n                    </Stack>\n                ),\n                endAdornment: (\n                    <InputAdornment position=\"start\">\n                        <IconButton onClick={() => setOpenPicker((prev) => !prev)}>\n                            <Smiley />\n                        </IconButton>\n                    </InputAdornment>\n                ),\n            }}\n        />\n    );\n};\n\n\nconst Footer = () => {\n    const theme = useTheme();\n    const [openPicker, setOpenPicker] = useState(false);\n    const { token } = useSelector((state) => state.auth);\n    const { messages } = useSelector((state) => state.messages);\n    // const socket = io(\"http://localhost:3002\");\n    const [inputField, setInputField] = useState('');\n\n    const handleSendMessage = async () => {\n        if (inputField.trim()) {\n            const apiRes = await apifetch(\"/chat/send\", token, { conversation_id: messages.conversation_element.id, message: inputField }, \"POST\");\n            if (apiRes.success) {\n                setInputField('');\n                apiRes.data.type = \"text\";\n                dispatch(addMessage(apiRes.data));\n                \n            }\n        }\n    };\n\n    return (\n        <Box p={2} sx={{ width: '100%', backgroundColor: theme.palette.mode === 'light' ? '#F8FAFF' : theme.palette.background.paper, boxShadow: '0px 0px 2px rgba(0,0,0,0.25)' }}>\n            <Stack direction='row' alignItems={'center'} spacing={3}>\n                <Stack sx={{ width: '100%' }}>\n                    {/* Chat Input */}\n                    <ChatInput setOpenPicker={setOpenPicker} inputField={inputField} setInputField={setInputField} />\n                </Stack>\n\n                <Box onClick={handleSendMessage} sx={{ height: 48, width: 48, backgroundColor: theme.palette.primary.main, borderRadius: 1.5 }}>\n                    <Stack sx={{ height: '100%', width: '100%', alignItems: 'center', justifyContent: 'center' }}>\n                        <IconButton>\n                            <PaperPlaneTilt color='#fff' />\n                        </IconButton>\n                    </Stack>\n                </Box>\n            </Stack>\n        </Box>\n    );\n};\n\nexport default Footer;\n","import {  Box, Stack} from '@mui/material';\nimport React from 'react';\nimport { useTheme } from \"@mui/material/styles\";\nimport Header from './Header';\nimport Footer from './Footer';\nimport Message from './Message';\n\n\nconst Conversation = () => {\n    const theme = useTheme();\n\n  return (\n    <Stack height={'100%'} maxHeight={'100vh'} width={'auto'}>\n\n        {/* Chat header */}\n        <Header/>\n        {/* Msg */}\n        <Box className='scrollbar' width={\"100%\"} sx={{flexGrow:1, height:'100%', overflowY:'scroll'}}>\n        <Message menu={true}/>\n        </Box>\n        {/* Chat footer */}\n       <Footer/>\n    </Stack>\n  )\n}\n\nexport default Conversation","import styled from \"@emotion/styled\";\nimport { Badge } from \"@mui/material\";\n\nconst StyledBadge = styled(Badge)(({ theme }) => ({\n    \"& .MuiBadge-badge\": {\n      backgroundColor: \"#44b700\",\n      color: \"#44b700\",\n      boxShadow: `0 0 0 2px ${theme.palette.background.paper}`,\n      \"&::after\": {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        borderRadius: \"50%\",\n        animation: \"ripple 1.2s infinite ease-in-out\",\n        border: \"1px solid currentColor\",\n        content: '\"\"',\n      },\n    },\n    \"@keyframes ripple\": {\n      \"0%\": {\n        transform: \"scale(.8)\",\n        opacity: 1,\n      },\n      \"100%\": {\n        transform: \"scale(2.4)\",\n        opacity: 0,\n      },\n    },\n  }));\n\n  export default StyledBadge","import { BASE_API } from \"../config\";\n\n\nexport async function apifetch(route, token = null, data = {}, method = \"GET\", headers = {}) {\n    console.log('api data payload ', data);\n    try {\n        method = method.toUpperCase();\n        let url = BASE_API + route;\n\n        // Add query parameters for GET requests\n        if (method === \"GET\" && Object.keys(data).length > 0) {\n            const queryParams = new URLSearchParams(data).toString();\n            url += `?${queryParams}`;\n        }\n\n        const options = {\n            method,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                ...(token ? { Authorization: `Bearer ${token}` } : {}),\n                ...headers,\n            },\n        };\n\n        // Attach body for non-GET methods\n        if (method !== \"GET\") {\n            options.body = JSON.stringify(data);\n        }\n\n        const response = await fetch(url, options);\n\n        // Check if the response is not OK\n        if (!response.ok) {\n            let errorMessage = `API Error: ${response.status} ${response.statusText}`;\n            let errorResponse = {};\n            try {\n                errorResponse = await response.json();\n                errorMessage = errorResponse.message || errorMessage;\n            } catch (e) {\n                console.error('Error parsing error response JSON:', e);\n            }\n            return {\n                status: response.status,\n                message: errorMessage,\n                response: errorResponse,\n                success: errorResponse?.success,\n                ...(errorMessage === 'API Error' ? {} : { errorDetails: errorMessage }),\n            };\n        }\n\n        // If the response is OK, parse and return the response JSON\n        const jsonResponse = await response.json();\n        return jsonResponse;\n    } catch (error) {\n        // Handle network or unexpected errors\n        return {\n            status: 0,\n            message: `Internal Error: ${error.message}`,\n        };\n    }\n}\n"],"names":["dispatch","useDispatch","theme","useTheme","messages","useSelector","state","ce","conversation_element","Object","keys","length","constructor","isNotReal","console","log","AvatarImg","alt","name","src","faker","p","sx","width","backgroundColor","palette","mode","background","paper","boxShadow","alignItems","direction","justifyContent","height","onClick","ToggleSidebar","spacing","is_online","overlap","anchorOrigin","vertical","horizontal","variant","is_group","users","orientation","flexItem","socket","io","autoConnect","menu","user","auth","useEffect","on","data","conversation_id","id","user_id","addMessage","off","messagesEndRef","useRef","current","scrollIntoView","behavior","Box","Stack","reverse","map","el","index","type","ref","DocMsg","incoming","default","primary","main","borderRadius","size","color","text","message","MessageOptions","LinkMsg","preview","style","maxHeight","component","Link","to","TextMsg","is_incoming","content","React","anchorEl","setAnchorEl","open","Boolean","handleClick","event","currentTarget","undefined","onClose","MenuListProps","px","Message_options","title","StyledInput","styled","TextField","paddingTop","paddingBottom","Actions","icon","y","ChatInput","setOpenPicker","inputField","setInputField","useState","openAction","setOpenAction","value","onChange","e","target","fullWidth","placeholder","InputProps","disableUnderline","startAdornment","position","display","Tooltip","placement","Fab","top","InputAdornment","IconButton","prev","endAdornment","token","handleSendMessage","trim","apifetch","apiRes","success","Header","className","flexGrow","overflowY","Message","StyledBadge","Badge","left","animation","border","transform","opacity","route","method","headers","toUpperCase","url","BASE_API","queryParams","URLSearchParams","toString","options","Authorization","body","JSON","stringify","fetch","response","ok","errorMessage","status","statusText","errorResponse","json","error","errorDetails","jsonResponse"],"sourceRoot":""}